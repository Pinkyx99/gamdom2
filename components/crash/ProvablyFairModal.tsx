import React from 'react';

interface ProvablyFairModalProps {
  show: boolean;
  onClose: () => void;
}

export const ProvablyFairModal: React.FC<ProvablyFairModalProps> = ({ show, onClose }) => {
  if (!show) {
    return null;
  }

  return (
    <div className="fixed inset-0 bg-black/70 backdrop-blur-sm flex items-center justify-center z-50 p-4" onClick={onClose}>
      <div 
        className="bg-card-bg w-full max-w-3xl h-auto max-h-[90vh] rounded-2xl flex flex-col overflow-hidden shadow-2xl border border-outline"
        onClick={e => e.stopPropagation()}
      >
        {/* Header */}
        <div className="flex justify-between items-center p-4 sm:p-6 border-b border-outline flex-shrink-0">
          <h2 className="text-xl font-bold text-white">Provably Fair System</h2>
          <button onClick={onClose} className="p-2 text-text-muted hover:text-white" aria-label="Close">
            <svg className="w-6 h-6" fill="none" stroke="currentColor" viewBox="0 0 24 24"><path strokeLinecap="round" strokeLinejoin="round" strokeWidth="2" d="M6 18L18 6M6 6l12 12"></path></svg>
          </button>
        </div>
        
        {/* Content */}
        <div className="flex-1 overflow-y-auto p-4 sm:p-6 space-y-6 text-sm text-text-muted">
          {/* Section 1: How it Works */}
          <div>
            <h3 className="text-lg font-semibold text-white mb-2">How It Works: Game Hash System</h3>
            <p>
              Our Crash game uses a cryptographically secure system to generate every multiplier, ensuring that the outcome is predetermined and cannot be altered in real-time. The result is generated before you even place a bet.
            </p>
            <p className="mt-2">
              The system combines three key elements:
            </p>
            <ul className="list-disc list-inside space-y-1 mt-2 pl-2">
              <li><strong className="text-white/80">Server Seed:</strong> A secret random string generated by our servers for each round.</li>
              <li><strong className="text-white/80">Client Seed:</strong> A random string provided by your browser, which you can change at any time.</li>
              <li><strong className="text-white/80">Nonce:</strong> A number that increases with every bet you place with your current seed pair.</li>
            </ul>
            <p className="mt-2">
              These three inputs are combined and hashed using <code className="bg-background px-1 py-0.5 rounded text-accent-green text-xs">HMAC-SHA256</code> to produce a final game hash. This hash deterministically generates the round's crash multiplier. The Server Seed is only revealed after the round is over, proving we couldn't have changed it.
            </p>
          </div>

          {/* Section 2: Formula */}
          <div>
            <h3 className="text-lg font-semibold text-white mb-2">The Crash Multiplier Formula</h3>
            <p>
              The game hash is converted into a crash point using a standardized mathematical formula. This ensures a consistent and fair distribution of results, which includes a 1% house edge.
            </p>
            <div className="bg-background border border-outline p-4 rounded-lg mt-2 space-y-1 text-xs sm:text-sm">
                <code className="block text-white">
                    <span className="text-purple-400">const</span> gameHash = <span className="text-yellow-300">HMAC_SHA256</span>(serverSeed, clientSeed + <span className="text-orange-400">'-'</span> + nonce);
                </code>
                <code className="block text-white">
                    <span className="text-purple-400">const</span> hex = gameHash.<span className="text-yellow-300">substring</span>(<span className="text-orange-400">0</span>, <span className="text-orange-400">13</span>); <span className="text-gray-500">// 52 bits</span>
                </code>
                <code className="block text-white">
                    <span className="text-purple-400">const</span> intValue = <span className="text-yellow-300">parseInt</span>(hex, <span className="text-orange-400">16</span>);
                </code>
                 <code className="block text-white">
                    <span className="text-purple-400">const</span> crashPoint = (<span className="text-orange-400">100</span> - HOUSE_EDGE) / (<span className="text-orange-400">1</span> - (intValue / <span className="text-yellow-300">Math</span>.<span className="text-yellow-300">pow</span>(<span className="text-orange-400">2</span>, <span className="text-orange-400">52</span>)));
                </code>
                <code className="block text-white">
                    <span className="text-purple-400">const</span> result = <span className="text-yellow-300">Math</span>.<span className="text-yellow-300">max</span>(<span className="text-orange-400">1</span>, <span className="text-yellow-300">Math</span>.<span className="text-yellow-300">floor</span>(crashPoint * <span className="text-orange-400">100</span>) / <span className="text-orange-400">100</span>);
                </code>
            </div>
          </div>

          {/* Section 3: Odds */}
          <div>
            <h3 className="text-lg font-semibold text-white mb-2">Probability Distribution & Payout Odds</h3>
            <p className="mb-3">
              The formula creates a long-tail probability distribution. While very high multipliers are rare, they are possible. The majority of games will crash at lower values.
            </p>
            <div className="border border-outline rounded-lg overflow-hidden">
              <table className="w-full text-left">
                <thead className="bg-background">
                  <tr>
                    <th className="p-3 font-semibold text-white/80">Probability of Multiplier...</th>
                    <th className="p-3 font-semibold text-white/80 text-right">Chance</th>
                  </tr>
                </thead>
                <tbody className="divide-y divide-outline">
                  {[
                    { range: '< 1.20x', chance: '~13%' },
                    { range: '< 1.50x', chance: '~36%' },
                    { range: '< 2.00x', chance: '~50%' },
                    { range: '< 10.00x', chance: '~95%' },
                    { range: '> 100.00x', chance: '~0.1%' },
                    { range: '> 1000.00x', chance: '~0.001%' },
                  ].map(item => (
                    <tr key={item.range}>
                      <td className="p-3">{item.range}</td>
                      <td className="p-3 text-right font-mono text-white/90">{item.chance}</td>
                    </tr>
                  ))}
                </tbody>
              </table>
            </div>
            <p className="text-xs italic mt-2">*Includes a ~1% chance of an instant crash at 1.00x.</p>
          </div>

           {/* Section 4: Verification */}
          <div>
            <h3 className="text-lg font-semibold text-white mb-2">How to Verify</h3>
            <p>
              You don't have to trust usâ€”you can verify any round yourself. After a round concludes, we reveal the Server Seed used. You can take this seed, your client seed, and the round's nonce, and use an independent verifier (like an online HMAC-SHA256 calculator) to generate the same game hash and confirm the result was fair.
            </p>
          </div>
        </div>
      </div>
    </div>
  );
};
